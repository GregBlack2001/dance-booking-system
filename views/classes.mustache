<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>{{title}}</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.2/font/bootstrap-icons.min.css">
  <style>
    body {
      background-color: #f8f9fa;
    }
    .page-header {
      background-color: #343a40;
      color: white;
      padding: 2rem 0;
      margin-bottom: 2rem;
    }
    .course-card {
      border: none;
      border-radius: 4px;
      box-shadow: 0 2px 4px rgba(0,0,0,.05);
      height: 100%;
      transition: box-shadow 0.2s ease;
    }
    .course-card:hover {
      box-shadow: 0 4px 8px rgba(0,0,0,.1);
    }
    .course-info {
      color: #6c757d;
      font-size: 0.9rem;
    }
    .course-info i {
      width: 20px;
      text-align: center;
      margin-right: 8px;
    }
    .filter-section {
      background-color: white;
      border-radius: 4px;
      padding: 1.5rem;
      margin-bottom: 1.5rem;
      box-shadow: 0 2px 4px rgba(0,0,0,.05);
    }
    .filter-section .form-select {
      flex: 1;
    }
    .filter-section .input-group {
      border-radius: 4px;
      overflow: hidden;
    }
    .filter-section .input-group-text {
      border-right: none;
      background-color: white;
    }
    .filter-section input.form-control {
      border-left: none;
    }
    .filter-section input.form-control:focus,
    .filter-section .form-select:focus {
      box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
      border-color: #86b7fe;
    }
    .course-price {
      font-weight: 500;
      color: #495057;
    }
    .no-results {
      background-color: white;
      border-radius: 4px;
      padding: 3rem;
      text-align: center;
      box-shadow: 0 2px 4px rgba(0,0,0,.05);
    }
    .btn-booking {
      padding: 0.5rem 1.5rem;
    }
    .admin-actions {
      margin-top: 1rem;
      padding-top: 1rem;
      border-top: 1px solid #f0f0f0;
    }
    @media (max-width: 992px) {
      .filter-section .d-flex {
        justify-content: space-between;
      }
      
      .filter-section .form-select {
        flex: 1;
        min-width: calc(33% - 8px);
      }
    }
    @media (max-width: 576px) {
      .filter-section .d-flex {
        flex-direction: column;
        width: 100%;
      }
      
      .filter-section .form-select {
        width: 100%;
        margin-bottom: 8px;
      }
    }
  </style>
</head>
<body>

  {{> navbar}}

  <!-- Page Header -->
  <header class="page-header">
    <div class="container">
      <h1 class="mb-0">{{title}}</h1>
    </div>
  </header>

  <div class="container py-3">
    <!-- Hidden CSRF token -->
    <input type="hidden" id="csrfToken" value="{{csrfToken}}">
    
    <!-- Filter and Search Controls -->
    <div class="filter-section mb-4">
      <div class="row g-3 align-items-center">
        <div class="col-lg-5 col-md-12 mb-md-3 mb-lg-0">
          <div class="input-group">
            <span class="input-group-text bg-white">
              <i class="bi bi-search"></i>
            </span>
            <input type="text" id="courseSearch" class="form-control border-start-0" placeholder="Search classes...">
          </div>
        </div>
        <div class="col-lg-7 col-md-12">
          <div class="d-flex flex-wrap gap-2 justify-content-lg-end">
            <select id="instructorFilter" class="form-select" style="min-width: 150px; max-width: 200px;">
              <option value="">All Instructors</option>
              {{#instructors}}
              <option value="{{.}}">{{.}}</option>
              {{/instructors}}
            </select>
            <select id="locationFilter" class="form-select" style="min-width: 150px; max-width: 200px;">
              <option value="">All Locations</option>
              {{#locations}}
              <option value="{{.}}">{{.}}</option>
              {{/locations}}
            </select>
            <select id="sortOption" class="form-select" style="min-width: 150px; max-width: 200px;">
              <option value="dateAsc">Date (Earliest First)</option>
              <option value="dateDesc">Date (Latest First)</option>
              <option value="priceAsc">Price (Low to High)</option>
              <option value="priceDesc">Price (High to Low)</option>
              <option value="title">Title (A-Z)</option>
            </select>
          </div>
        </div>
      </div>
    </div>

    {{#courses.length}}
      <div id="courseContainer" class="row">
        {{#courses}}
          <div class="col-md-6 col-lg-4 mb-4 course-item" 
               data-instructor="{{instructor}}" 
               data-location="{{location}}" 
               data-date="{{date}}" 
               data-price="{{price}}" 
               data-title="{{title}}">
            <div class="course-card card h-100">
              <!-- Add hidden span with course ID -->
              <span class="course-id-holder d-none">{{_id}}</span>
              
              <div class="card-body">
                <h5 class="card-title">{{title}}</h5>
                <p class="card-subtitle mb-2 text-muted">{{instructor}}</p>
                <p class="card-text mb-3">{{description}}</p>
                
                <div class="course-info mb-1">
                  <i class="bi bi-calendar3"></i> {{date}}
                </div>
                <div class="course-info mb-1">
                  <i class="bi bi-geo-alt"></i> {{location}}
                </div>
                <div class="course-info mb-1">
                  <i class="bi bi-clock"></i> {{duration}}
                </div>
                <div class="course-info mb-3">
                  <i class="bi bi-tag"></i> <span class="course-price">Â£{{price}}</span>
                </div>

                <div class="d-grid">
                  {{#user}}
                    <button class="btn btn-primary btn-booking book-btn" 
                            data-bs-toggle="modal" 
                            data-bs-target="#confirmModal">
                      Book Course
                    </button>
                  {{/user}}

                  {{^user}}
                    <a href="/book/{{_id}}" class="btn btn-primary btn-booking">Book Course</a>
                  {{/user}}

                  {{#isAdmin}}
                    <div class="admin-actions">
                      <div class="btn-group w-100">
                        <a href="/courses/edit/{{_id}}" class="btn btn-sm btn-outline-secondary">Edit</a>
                        <a href="/courses/participants/{{_id}}" class="btn btn-sm btn-outline-secondary">Participants</a>
                        <form method="POST" action="/courses/delete/{{_id}}" class="d-inline ms-1">
                          <input type="hidden" name="_csrf" value="{{csrfToken}}">
                          <button class="btn btn-sm btn-outline-danger" type="submit" 
                                  onclick="return confirm('Are you sure you want to delete this course?');">
                            Delete
                          </button>
                        </form>
                      </div>
                    </div>
                  {{/isAdmin}}
                </div>
              </div>
            </div>
          </div>
        {{/courses}}
      </div>
      <div id="noResultsMessage" class="no-results d-none">
        <i class="bi bi-search mb-3 d-block" style="font-size: 2rem;"></i>
        <h4>No classes match your filter criteria</h4>
        <p class="text-muted mb-0">Try adjusting your filters or search terms.</p>
      </div>
    {{/courses.length}}

    {{^courses.length}}
      <div class="no-results">
        <i class="bi bi-calendar-x mb-3 d-block" style="font-size: 2rem;"></i>
        <h4>No upcoming classes</h4>
        <p class="text-muted mb-0">Please check back later for new class schedules.</p>
      </div>
    {{/courses.length}}
  </div>

  <!-- Modal for booking confirmation -->
  <div class="modal fade" id="confirmModal" tabindex="-1" aria-labelledby="confirmModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="confirmModalLabel">Confirm Booking</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          Are you sure you want to book <strong id="modalCourseTitle"></strong>?
          <!-- Hidden input to store the course ID -->
          <input type="hidden" id="modalCourseId" />
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button id="confirmBookingBtn" class="btn btn-primary">Yes, Book</button>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Set up booking buttons correctly
      document.querySelectorAll('.book-btn').forEach(btn => {
        const card = btn.closest('.card');
        const courseId = card.querySelector('.course-id-holder').textContent;
        const courseTitle = card.querySelector('.card-title').textContent;
        
        // Store course data on the button
        btn.setAttribute('data-course-id', courseId);
        btn.setAttribute('data-course-title', courseTitle);
      });
      
      // Modal handling
      const modal = document.getElementById('confirmModal');
      
      modal.addEventListener('show.bs.modal', function (event) {
        const button = event.relatedTarget;
        
        // Get the course ID from the button's data attribute
        const courseId = button.getAttribute('data-course-id');
        const courseTitle = button.getAttribute('data-course-title');
        
        // Store the course ID in the modal
        document.getElementById('modalCourseId').value = courseId;
        document.getElementById('modalCourseTitle').textContent = courseTitle;
      });

      document.getElementById('confirmBookingBtn').addEventListener('click', function () {
        // Get the course ID from the hidden input in the modal
        const courseId = document.getElementById('modalCourseId').value;
        const csrfToken = document.getElementById('csrfToken').value;

        if (!courseId) {
          return;
        }

        // Make the fetch request with the course ID
        fetch(`/book/${courseId}`, { 
          method: 'POST',
          headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
            'CSRF-Token': csrfToken
          }
        })
        .then(response => {
          const contentType = response.headers.get('content-type');
          if (contentType && contentType.includes('application/json')) {
            return response.json().then(data => {
              if (!response.ok) {
                // Create an error object with the server's error message
                const error = new Error(data.error || 'Booking failed');
                // Add a flag to indicate if this is a duplicate booking
                error.isDuplicate = data.isDuplicate || false;
                throw error;
              }
              return data;
            });
          }
          if (!response.ok) {
            throw new Error('Booking failed');
          }
          return { message: 'Booking successful' };
        })
        .then((data) => {
          const message = typeof data === 'object' ? data.message : 'Booking confirmed!';
          
          const toastContainer = document.createElement('div');
          toastContainer.innerHTML = `
            <div class="toast-container position-fixed bottom-0 end-0 p-3">
              <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-header bg-success text-white">
                  <strong class="me-auto">Booking Successful</strong>
                  <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
                <div class="toast-body">${message}</div>
              </div>
            </div>
          `;
          document.body.appendChild(toastContainer);

          // Close the modal
          const modalElement = bootstrap.Modal.getInstance(document.getElementById('confirmModal'));
          if (modalElement) {
            modalElement.hide();
          }

          setTimeout(() => location.reload(), 2000);
        })
        .catch((error) => {
          console.error('Booking error:', error);
          
          // Change the styling based on whether it's a duplicate booking or an error
          const headerClass = error.isDuplicate ? 'bg-warning text-dark' : 'bg-danger text-white';
          const toastClass = error.isDuplicate ? 'toast show bg-warning text-dark' : 'toast show bg-danger text-white';
          const headerTitle = error.isDuplicate ? 'Booking Notice' : 'Booking Error';
          
          const toastContainer = document.createElement('div');
          toastContainer.innerHTML = `
            <div class="toast-container position-fixed bottom-0 end-0 p-3">
              <div class="${toastClass}" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-header ${headerClass}">
                  <strong class="me-auto">${headerTitle}</strong>
                  <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
                <div class="toast-body">
                  ${error.message || 'There was a problem with your booking.'}
                </div>
              </div>
            </div>
          `;
          document.body.appendChild(toastContainer);

          // Close the modal
          const modalElement = bootstrap.Modal.getInstance(document.getElementById('confirmModal'));
          if (modalElement) {
            modalElement.hide();
          }

          setTimeout(() => {
            const toast = document.querySelector('.toast-container');
            if (toast) toast.remove();
          }, 5000);
        });
      });

      // Filtering and Sorting Functionality
      const courseSearch = document.getElementById('courseSearch');
      const instructorFilter = document.getElementById('instructorFilter');
      const locationFilter = document.getElementById('locationFilter');
      const sortOption = document.getElementById('sortOption');
      const courseItems = document.querySelectorAll('.course-item');
      const noResultsMessage = document.getElementById('noResultsMessage');
      
      // Function to filter and sort courses
      function filterAndSortCourses() {
        const searchTerm = courseSearch.value.toLowerCase();
        const selectedInstructor = instructorFilter.value;
        const selectedLocation = locationFilter.value;
        const selectedSortOption = sortOption.value;
        
        let visibleCount = 0;
        
        // First filter the courses
        courseItems.forEach(item => {
          const title = item.querySelector('.card-title').textContent.toLowerCase();
          const description = item.querySelector('.card-text').textContent.toLowerCase();
          const instructor = item.getAttribute('data-instructor');
          const location = item.getAttribute('data-location');
          
          const matchesSearch = title.includes(searchTerm) || description.includes(searchTerm);
          const matchesInstructor = !selectedInstructor || instructor === selectedInstructor;
          const matchesLocation = !selectedLocation || location === selectedLocation;
          
          if (matchesSearch && matchesInstructor && matchesLocation) {
            item.style.display = '';
            visibleCount++;
          } else {
            item.style.display = 'none';
          }
        });
        
        // Show/hide no results message
        if (visibleCount === 0) {
          noResultsMessage.classList.remove('d-none');
        } else {
          noResultsMessage.classList.add('d-none');
        }
        
        // Then sort the visible courses
        const courseContainer = document.getElementById('courseContainer');
        const visibleItems = Array.from(courseItems).filter(item => item.style.display !== 'none');
        
        visibleItems.sort((a, b) => {
          switch(selectedSortOption) {
            case 'dateAsc':
              return new Date(a.getAttribute('data-date')) - new Date(b.getAttribute('data-date'));
            case 'dateDesc':
              return new Date(b.getAttribute('data-date')) - new Date(a.getAttribute('data-date'));
            case 'priceAsc':
              return parseFloat(a.getAttribute('data-price')) - parseFloat(b.getAttribute('data-price'));
            case 'priceDesc':
              return parseFloat(b.getAttribute('data-price')) - parseFloat(a.getAttribute('data-price'));
            case 'title':
              return a.getAttribute('data-title').localeCompare(b.getAttribute('data-title'));
            default:
              return 0;
          }
        });
        
        // Remove all current items and add them back in the sorted order
        visibleItems.forEach(item => {
          courseContainer.appendChild(item);
        });
      }
      
      // Add event listeners for filter and sort controls
      courseSearch.addEventListener('keyup', filterAndSortCourses);
      instructorFilter.addEventListener('change', filterAndSortCourses);
      locationFilter.addEventListener('change', filterAndSortCourses);
      sortOption.addEventListener('change', filterAndSortCourses);
    });
  </script>
</body>
</html>